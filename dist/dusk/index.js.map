{"version":3,"sources":["../../src/dusk/index.ts"],"sourcesContent":["import { O } from \"../types\";\r\n\r\nexport default class Dusk {\r\n    url: string\r\n    params: O<string, any>\r\n    constructor(url: string, params?: O<string, any>) {\r\n        if(params) this.params = params\r\n        this.url = this.replace_keys(url);\r\n    }\r\n\r\n    private replace_keys(url: string): string {\r\n        let ur = `${url}`;\r\n        let u = url.split(\"/\").slice(3, url.split('/').length).map((z) => {\r\n            let h = z.includes(\":\") ? z.replaceAll(\":\", \"\") : z\r\n            return h.toLowerCase()\r\n        })\r\n        if(this.params) {\r\n            for(let j = 0; j < u.length; j++) {\r\n                let z = u[j]\r\n                for(let i = 0; i < Object.keys(this.params).length; i++) {\r\n                    let key = Object.keys(this.params)[i]\r\n                    let value = this.params[key]\r\n                    if(z.toLowerCase() === key.toLowerCase()) {\r\n                        ur = ur.replaceAll(`:${z}`, `${value}`)\r\n                        delete this.params[key]\r\n                        this.params = {...this.params}\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return ur\r\n    }\r\n\r\n    public async fetch(data: ResponseInit): Promise<Response> {\r\n        return fetch(this.url, data)\r\n    }\r\n    public format(): this {\r\n        let u = this.url\r\n        if(this.params) {\r\n            for(let i = 0; i < Object.keys(this.params).length; i++) {\r\n                let symbol = i == 0 ? \"?\" : \"&\"\r\n                let key = Object.keys(this.params)[i]\r\n                let value = this.params[key]\r\n                u += `${symbol}${key}=${encodeURIComponent(value)}`\r\n            }\r\n        }\r\n        this.url = u\r\n        return this\r\n    }\r\n}"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA,IAAqB,OAArB,MAA0B;AAAA,EACtB;AAAA,EACA;AAAA,EACA,YAAY,KAAa,QAAyB;AAC9C,QAAG;AAAQ,WAAK,SAAS;AACzB,SAAK,MAAM,KAAK,aAAa,GAAG;AAAA,EACpC;AAAA,EAEQ,aAAa,KAAqB;AACtC,QAAI,KAAK,GAAG;AACZ,QAAI,IAAI,IAAI,MAAM,GAAG,EAAE,MAAM,GAAG,IAAI,MAAM,GAAG,EAAE,MAAM,EAAE,IAAI,CAAC,MAAM;AAC9D,UAAI,IAAI,EAAE,SAAS,GAAG,IAAI,EAAE,WAAW,KAAK,EAAE,IAAI;AAClD,aAAO,EAAE,YAAY;AAAA,IACzB,CAAC;AACD,QAAG,KAAK,QAAQ;AACZ,eAAQ,IAAI,GAAG,IAAI,EAAE,QAAQ,KAAK;AAC9B,YAAI,IAAI,EAAE,CAAC;AACX,iBAAQ,IAAI,GAAG,IAAI,OAAO,KAAK,KAAK,MAAM,EAAE,QAAQ,KAAK;AACrD,cAAI,MAAM,OAAO,KAAK,KAAK,MAAM,EAAE,CAAC;AACpC,cAAI,QAAQ,KAAK,OAAO,GAAG;AAC3B,cAAG,EAAE,YAAY,MAAM,IAAI,YAAY,GAAG;AACtC,iBAAK,GAAG,WAAW,IAAI,KAAK,GAAG,OAAO;AACtC,mBAAO,KAAK,OAAO,GAAG;AACtB,iBAAK,SAAS,EAAC,GAAG,KAAK,OAAM;AAAA,UACjC;AAAA,QACJ;AAAA,MACJ;AAAA,IACJ;AACA,WAAO;AAAA,EACX;AAAA,EAEA,MAAa,MAAM,MAAuC;AACtD,WAAO,MAAM,KAAK,KAAK,IAAI;AAAA,EAC/B;AAAA,EACO,SAAe;AAClB,QAAI,IAAI,KAAK;AACb,QAAG,KAAK,QAAQ;AACZ,eAAQ,IAAI,GAAG,IAAI,OAAO,KAAK,KAAK,MAAM,EAAE,QAAQ,KAAK;AACrD,YAAI,SAAS,KAAK,IAAI,MAAM;AAC5B,YAAI,MAAM,OAAO,KAAK,KAAK,MAAM,EAAE,CAAC;AACpC,YAAI,QAAQ,KAAK,OAAO,GAAG;AAC3B,aAAK,GAAG,SAAS,OAAO,mBAAmB,KAAK;AAAA,MACpD;AAAA,IACJ;AACA,SAAK,MAAM;AACX,WAAO;AAAA,EACX;AACJ;","names":[]}